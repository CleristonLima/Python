## IMPORTANDO O NLTK

import nltk
nltk.download('punkt')

palavras_separadas = nltk.tokenize.word_tokenize(texto_exemplo)

print(palavras_separadas)

---------------------------------------------------------------------------------------------------------------

## PARA RETORNAR O NUMERO DE CARACTERES

len(palavras_separadas)

'./'.isalpha()

def separa_palavras(lista_tokens):
  lista_palavras = []
  for token in lista_tokens:
    if token.isalpha():
      lista_palavras.append(token)
  return lista_palavras

separa_palavras(palavras_separadas)


lista_tokens = nltk.tokenize.word_tokenize(artigos)
lista_palavras = separa_palavras(lista_tokens)
print(f"O número de palavras é {len(lista_palavras)}")

print(lista_palavras[:5])


def normalizacao(lista_palavras):
  lista_normalizada = []
  for palavra in lista_palavras:
      lista_normalizada.append(palavra.lower())
  return lista_normalizada

lista_normalizada = normalizacao(lista_palavras)
print(lista_normalizada[:5])


len(set(lista_normalizada))

------------------------------------------------------------------------------------------------------

## GERANDO PALAVRAS

lista = "lgica"
(lista[:1], lista[1:])

palavra_exemplo = "lgica"
def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra)+1):
    fatias.append((lista[:i], lista[i:]))
  print(fatias)
  #palavras_geradas = insere_letras(fatias)
  #return palavras_geradas

gerador_palavras(palavra_exemplo)

----------------------------------------------------------------------------------------------

## VERIFICA E PEGA CADA LETRA DO ALFABETO PARA FAZER A PALAVRA
palavra_exemplo = "lgica"

def insere_letras(fatias):
  novas_palavras = []
  letras = 'abcdefghijklmnopqrstuvwxyzáâàãéêèíîìóôòõúûùñç'
  for E, D in fatias:
      for letra in letras:
          novas_palavras.append(E + letra + D)
  return novas_palavras

def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra)+1):
    fatias.append((palavra[:i], palavra[i:]))
  palavras_geradas = insere_letras(fatias)
  return palavras_geradas


def corretor(palavra):
  palavras_geradas = gerador_palavras(palavra)
  palavra_correta = max(palavras_geradas, key=probabilidade)
  return palavra_correta
  
  # Calculando a probabilidade da palavra
  # frequencia_palavra/total_de_palavras

frequencia = nltk.FreqDist(lista_normalizada)
total_palavras = len(lista_normalizada)
frequencia.most_common(10)



# Criando a variavel de probabilidade
def probabilidade(palavra_gerada):
  return frequencia[palavra_gerada] /total_palavras
probabilidade("lógica")
palavras_geradas = gerador_palavras(palavra_exemplo)
print(palavras_geradas)
-----------------------------------------------------------------------------------------------------

## Taxas de acerto com as palavras

def cria_dados_teste(nome_arquivo):
    lista_palavras_teste = []
    f = open(nome_arquivo, "r")
    for linha in f:
        correta, errada = linha.split() 
        lista_palavras_teste.append((correta, errada))
    f.close()
    return lista_palavras_teste

lista_teste =  cria_dados_teste("palavras.txt")
lista_teste
------------------------------------------------------------------------------------------------

### AVALIADOR DE ACERTOS

def avaliador(testes):
    numero_palavras = len(testes)
    acertou = 0
    for correta, errada in testes:
        palavra_corrigida = corretor(errada)
        if palavra_corrigida == correta:
          acertou += 1
    taxa_acerto = round(acertou*100/numero_palavras, 2)
    print(f"{taxa_acerto}% de {numero_palavras} palavras")

avaliador(lista_teste)
--------------------------------------------------------------------------------------
### DELETANDO AS PALAVRAS


def deletando_caracteres(fatias):
   novas_palavras = []
   for E, D in fatias:
       novas_palavras.append(E + D[1:])
   return novas_palavras
   
   
 def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra)+1):
    fatias.append((palavra[:i], palavra[i:]))
  palavras_geradas = insere_letras(fatias)
  palavras_geradas += deletando_caracteres(fatias)
  return palavras_geradas
palavra_exemplo = "lóigica"
palavras_geradas = gerador_palavras(palavra_exemplo)
print(palavras_geradas)

----------------------------------------------------------------------------------------

##### TAXAS DE PALAVRAS DESCONHECIDAS

def avaliador(testes, vocabulario):
    numero_palavras = len(testes)
    acertou = 0
    desconhecida = 0
    for correta, errada in testes:
        palavra_corrigida = corretor(errada)
        if palavra_corrigida == correta:
          acertou += 1
        else:
            desconhecida += (correta not in vocabulario)  
    taxa_acerto = round(acertou*100/numero_palavras, 2)
    taxa_desconhecida = round(desconhecida*100/numero_palavras, 2)
    print(f"{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}")

vocabulario = set(lista_normalizada)
avaliador(lista_teste, vocabulario)



palavra = "lóiigica"

def gerador_turbinado(palavras_geradas):
    novas_palavras = []
    for palavra in palavras_geradas:
        novas_palavras += gerador_palavras(palavra)
    return novas_palavras

palavras_g = gerador_turbinado(gerador_palavras(palavra))
"lógica" in palavras_g

len(palavras_g)

def novo_corretor(palavra):
  palavras_geradas = gerador_palavras(palavra)
  palavras_turbinado = gerador_turbinado(palavras_geradas)
  todas_palavras = set (palavras_geradas + palavras_turbinado)
  candidatos = [palavra]
  for palavra in todas_palavras:
      if palavra in vocabulario:
          candidatos.append(palavra)
  palavra_correta = max(candidatos, key=probabilidade)
  return palavra_correta

novo_corretor(palavra)

----------------------------------------------

## AVALIAÇÃO DO CORRETOR

def avaliador(testes, vocabulario):
    numero_palavras = len(testes)
    acertou = 0
    desconhecida = 0
    for correta, errada in testes:
        palavra_corrigida = novo_corretor(errada)
        desconhecida += (correta not in vocabulario)
        if palavra_corrigida == correta:
          acertou += 1
        else:
            print(errada + "-" + corretor(errada) + "-" + palavra_corrigida)
    taxa_acerto = round(acertou*100/numero_palavras, 2)
    taxa_desconhecida = round(desconhecida*100/numero_palavras, 2)
    print(f"{taxa_acerto}% de {numero_palavras} palavras, desconhecida é {taxa_desconhecida}")

vocabulario = set(lista_normalizada)
avaliador(lista_teste, vocabulario)
